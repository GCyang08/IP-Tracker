{"version":3,"sources":["components/OutputIpAddress/OutputIpAddress.module.css","containers/Tracker/Tracker.module.css","components/Maps/Maps.module.css","components/Maps/Maps.js","components/OutputIpAddress/OutputIpAddress.js","assets/icon-arrow.svg","components/UserInput/UserInput.js","containers/Tracker/Tracker.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Maps","props","lat","location","lng","MapContainer","center","zoom","scrollWheelZoom","position","className","classes","TileLayer","attribution","url","Marker","Popup","OutputIpAddress","Container","Output","Grid","outPutAdddress","outPutLocation","outPutTimezone","outPutIsp","useStyles","makeStyles","inputContainer","backgroundColor","borderRadius","display","flexDirection","justifyContent","alignItems","height","margin","width","input","flex","submit","borderTopRightRadius","borderBottomRightRadius","color","img","UserInput","TextField","placeholder","InputProps","style","value","onChange","e","onTextChange","getlocationdata","getLocationData","onClick","currentIpAddress","src","arrow","alt","apiKey","process","Tracker","state","showMap","type","address","setState","Axios","get","then","response","locationData","data","ip","catch","error","console","log","updateTextValueHandler","event","target","this","city","country","postalCode","timezone","isp","Component","App","Apps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baf92b04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Output\":\"OutputIpAddress_Output__24W2A\",\"Grid\":\"OutputIpAddress_Grid__3ZSO3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tracker\":\"Tracker_Tracker__2QY70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Maps\":\"Maps_Maps__2zs2u\"};","import React from \"react\";\r\nimport classes from \"./Maps.module.css\";\r\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\r\n\r\nconst Maps = (props) => {\r\n  const lat = props.location.lat;\r\n  const lng = props.location.lng;\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n        center={[lat, lng]}\r\n        zoom={13}\r\n        scrollWheelZoom={true}\r\n        position={[lat, lng]}\r\n        className={classes.Maps}\r\n      >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker position={[lat, lng]}>\r\n          <Popup>You are here!</Popup>\r\n        </Marker>\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Maps;\r\n","import React from \"react\";\r\nimport classes from \"./OutputIpAddress.module.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst OutputIpAddress = (props) => {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <div className={classes.Output}>\r\n          <div className={classes.Grid}>\r\n            <h3>IP ADDRESSS</h3>\r\n            <p>{props.outPutAdddress}</p>\r\n          </div>\r\n          <div className={classes.Grid}>\r\n            <h3>LOCATION</h3>\r\n            <p>{props.outPutLocation}</p>\r\n          </div>\r\n          <div className={classes.Grid}>\r\n            <h3>TIMEZONE</h3>\r\n            <p>{props.outPutTimezone}</p>\r\n          </div>\r\n          <div className={classes.Grid}>\r\n            <h3>ISP</h3>\r\n            <p>{props.outPutIsp}</p>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputIpAddress;\r\n","export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport arrow from \"../../assets/icon-arrow.svg\";\r\n\r\nconst useStyles = makeStyles({\r\n  inputContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"10px\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-apart\",\r\n    alignItems: \"center\",\r\n    height: \"60px\",\r\n    margin: \"15px auto\",\r\n    width: \"50%\",\r\n    \"@media (min-width: 481px) and (max-width: 767px) \": {\r\n      width: \"90%\",\r\n    },\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    width: \"100%\",\r\n  },\r\n  submit: {\r\n    backgroundColor: \"black\",\r\n    borderTopRightRadius: \"10px\",\r\n    borderBottomRightRadius: \"10px\",\r\n    color: \"white\",\r\n    display: \"flex\",\r\n    width: \"60px\",\r\n    height: \"60px\",\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n  },\r\n});\r\n\r\nconst UserInput = (props) => {\r\n  const classes = useStyles(props);\r\n\r\n  const handleSubmit = () => {\r\n    props.getlocationdata(\"ipAddress\", props.currentIpAddress);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.inputContainer}>\r\n      <TextField\r\n        placeholder={\"Seach for any IP address or domain\"}\r\n        InputProps={{\r\n          className: classes.input,\r\n        }}\r\n        style={{\r\n          margin: \"25px\",\r\n          width: \"90%\",\r\n        }}\r\n        value={props.value}\r\n        onChange={(e) => {\r\n          props.onTextChange(e);\r\n        }}\r\n        getlocationdata={props.getLocationData}\r\n      />\r\n      <div className={classes.submit} onClick={handleSubmit}>\r\n        <img className={classes.img} src={arrow} alt=\"submit arrow\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Tracker.module.css\";\r\nimport Axios from \"axios\";\r\nimport Maps from \"../../components/Maps/Maps\";\r\nimport OutputIpAddress from \"../../components/OutputIpAddress/OutputIpAddress\";\r\nimport UserInput from \"../../components/UserInput/UserInput\";\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nclass Tracker extends Component {\r\n  state = {\r\n    showMap: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getLocationData();\r\n  }\r\n\r\n  getLocationData = (type, address) => {\r\n    this.setState({\r\n      showMap: false,\r\n    });\r\n    let url;\r\n    if (type === \"ipAddress\") {\r\n      url = `https://geo.ipify.org/api/v1?apiKey=${apiKey}&ipAddress=${address}`;\r\n    } else if (type === \"domain\") {\r\n      url = `https://geo.ipify.org/api/v1?apiKey=${apiKey}&domain=${address}`;\r\n    } else {\r\n      url = `https://geo.ipify.org/api/v1?apiKey=${apiKey}`;\r\n    }\r\n\r\n    Axios.get(url)\r\n      .then((response) => {\r\n        this.setState({\r\n          showMap: true,\r\n          locationData: response,\r\n          currentIpAddress: response.data.ip,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateTextValueHandler = (event) => {\r\n    this.setState({\r\n      currentIpAddress: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Tracker}>\r\n        {this.state.locationData && (\r\n          <div>\r\n            <h1>IP Address Tracker</h1>\r\n            <UserInput\r\n              onTextChange={this.updateTextValueHandler}\r\n              value={this.state.currentIpAddress}\r\n              getlocationdata={this.getLocationData}\r\n              currentIpAddress={this.state.currentIpAddress}\r\n            />\r\n            {this.state.showMap && (\r\n              <Maps location={this.state.locationData.data.location} />\r\n            )}\r\n            <OutputIpAddress\r\n              outPutAdddress={this.state.locationData.data.ip}\r\n              outPutLocation={`${this.state.locationData.data.location.city}, ${this.state.locationData.data.location.country} ${this.state.locationData.data.location.postalCode}`}\r\n              outPutTimezone={this.state.locationData.data.location.timezone}\r\n              outPutIsp={this.state.locationData.data.isp}\r\n              location={this.state.locationData.data.location}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tracker;\r\n","import Tracker from \"./containers/Tracker/Tracker\";\nimport Apps from \"./App.css\";\n\nfunction App() {\n  return (\n    <div className={Apps}>\n      <Tracker />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}