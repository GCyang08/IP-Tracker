{"version":3,"sources":["components/Maps/Maps.js","components/OutputIpAddress/OutputIpAddress.js","assets/icon-arrow.svg","components/UserInput/UserInput.js","containers/Tracker/Tracker.js","App.js","reportWebVitals.js","index.js"],"names":["Maps","props","lat","location","lng","MapContainer","center","zoom","scrollWheelZoom","position","doubleClickZoom","className","TileLayer","attribution","url","Marker","Popup","OutputIpAddress","outputIp","output","header","pg","outPutAdddress","outPutLocation","outPutTimezone","outPutIsp","map","ip","UserInput","placeholder","value","onChange","e","onTextChange","getlocationdata","getLocationData","onClick","currentIpAddress","src","arrow","alt","apiKey","process","Tracker","state","showMap","type","address","setState","Axios","get","then","response","locationData","data","catch","error","console","log","updateTextValueHandler","event","target","this","city","country","postalCode","timezone","isp","Component","App","Apps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a321d7c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Maps.css\";\r\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\r\n\r\nconst Maps = (props) => {\r\n  const lat = props.location.lat;\r\n  const lng = props.location.lng;\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n        center={[lat, lng]}\r\n        zoom={15}\r\n        scrollWheelZoom={true}\r\n        position={[lat, lng]}\r\n        doubleClickZoom={true}\r\n        className=\"Maps\"\r\n      >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n\r\n        <Marker position={[lat, lng]}>\r\n          <Popup>You are here!</Popup>\r\n        </Marker>\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Maps;\r\n","import React from \"react\";\r\nimport \"./OutputIpAddress.css\";\r\n\r\nfunction OutputIpAddress(props) {\r\n  const outputIp = {\r\n    output: [\r\n      { header: \"IP ADDRESS\", pg: props.outPutAdddress },\r\n      { header: \"LOCATION\", pg: props.outPutLocation },\r\n      { header: \"TIME ZONE\", pg: props.outPutTimezone },\r\n      { header: \"ISP\", pg: props.outPutIsp },\r\n    ],\r\n  };\r\n  return (\r\n    <div className=\"Output\">\r\n      <div className=\"OutputIp\">\r\n        {outputIp.output.map((ip) => {\r\n          return (\r\n            <div>\r\n              <h3>{ip.header}</h3>\r\n              <p>{ip.pg}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OutputIpAddress;\r\n","export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React from \"react\";\r\nimport \"./UserInput.css\";\r\nimport arrow from \"../../assets/icon-arrow.svg\";\r\n\r\nfunction UserInput(props) {\r\n  const handleSubmit = () => {\r\n    props.getlocationdata(\"ipAddress\", props.currentIpAddress);\r\n  };\r\n\r\n  return (\r\n    <div className=\"UserInputLayout\">\r\n      <h1>IP Address Tracker</h1>\r\n      <div className=\"UserInput\">\r\n        <input\r\n          placeholder=\"Seach for any IP address or domain\"\r\n          value={props.value}\r\n          onChange={(e) => {\r\n            props.onTextChange(e);\r\n          }}\r\n          getlocationdata={props.getLocationData}\r\n        />\r\n        <div className=\"ImageBox\" onClick={handleSubmit}>\r\n          <img src={arrow} alt=\"submit arrow\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserInput;\r\n","import React, { Component } from \"react\";\r\nimport \"./Tracker.css\";\r\nimport Axios from \"axios\";\r\nimport Maps from \"../../components/Maps/Maps\";\r\nimport OutputIpAddress from \"../../components/OutputIpAddress/OutputIpAddress\";\r\nimport UserInput from \"../../components/UserInput/UserInput\";\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nclass Tracker extends Component {\r\n  state = {\r\n    showMap: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getLocationData();\r\n  }\r\n\r\n  getLocationData = (type, address) => {\r\n    this.setState({\r\n      showMap: false,\r\n    });\r\n    let url;\r\n    if (type === \"ipAddress\") {\r\n      url = `https://geo.ipify.org/api/v1?apiKey=${apiKey}&ipAddress=${address}`;\r\n    } else if (type === \"domain\") {\r\n      url = `https://geo.ipify.org/api/v1?apiKey=${apiKey}&domain=${address}`;\r\n    } else {\r\n      url = `https://geo.ipify.org/api/v1?apiKey=${apiKey}`;\r\n    }\r\n\r\n    Axios.get(url)\r\n      .then((response) => {\r\n        this.setState({\r\n          showMap: true,\r\n          locationData: response,\r\n          currentIpAddress: response.data.ip,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateTextValueHandler = (event) => {\r\n    this.setState({\r\n      currentIpAddress: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Tracker\">\r\n        {this.state.locationData && (\r\n          <div>\r\n            <UserInput\r\n              onTextChange={this.updateTextValueHandler}\r\n              value={this.state.currentIpAddress}\r\n              getlocationdata={this.getLocationData}\r\n              currentIpAddress={this.state.currentIpAddress}\r\n            />\r\n            {this.state.showMap && (\r\n              <Maps location={this.state.locationData.data.location} />\r\n            )}\r\n            <OutputIpAddress\r\n              outPutAdddress={this.state.locationData.data.ip}\r\n              outPutLocation={`${this.state.locationData.data.location.city}, ${this.state.locationData.data.location.country} ${this.state.locationData.data.location.postalCode}`}\r\n              outPutTimezone={this.state.locationData.data.location.timezone}\r\n              outPutIsp={this.state.locationData.data.isp}\r\n              location={this.state.locationData.data.location}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tracker;\r\n","import Tracker from \"./containers/Tracker/Tracker\";\nimport Apps from \"./App.css\";\n\nfunction App() {\n  return (\n    <div className={Apps}>\n      <Tracker />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}